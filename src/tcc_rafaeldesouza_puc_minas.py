# -*- coding: utf-8 -*-
"""TCC-RafaelDeSouza-PUC-Minas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t6LLv7QUKwe1l74_3N9kiYSZuXmtMKTM
"""

import pandas as pd
dados = pd.read_csv('medicoes_jlle.csv')
dados.head()

X = dados.drop(['Resultado'],axis=1).values
y = dados['Resultado'].values
y

from sklearn.model_selection import train_test_split
X_treino,X_teste,y_treino,y_teste = train_test_split(X,y,test_size=0.2)

type(X_treino)
print(X_treino)

import torch
X_treino = torch.FloatTensor(X_treino)
X_teste = torch.FloatTensor(X_teste)
y_treino = torch.LongTensor(y_treino)
y_teste = torch.LongTensor(y_teste)

print(y_teste)

import torch.nn as nn
import torch.nn.functional as F

# class Modelo(nn.Module):
#   def __init__(self,entrada=4,camada_escondida1=8,camada_escondida2=32,saida=2):
#     super().__init__()
#     self.fc1 = nn.Linear(entrada,camada_escondida1)
#     self.fc2 = nn.Linear(camada_escondida1, camada_escondida2)
#     self.out = nn.Linear(camada_escondida2, saida)
  
#   def forward(self, x):
#     x = F.relu(self.fc1(x))
#     x = F.relu(self.fc2(x))
#     x = self.out(x)
#     return x

class Modelo(nn.Module):
  def __init__(self,entrada=4,camada_escondida1=8,camada_escondida2=32,saida=2):
    super().__init__()
    self.fc1 = nn.Linear(entrada,camada_escondida1)
    self.fc2 = nn.Linear(camada_escondida1, camada_escondida2)
    self.out = nn.Linear(camada_escondida2, saida)
  
  def forward(self, x):
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = self.out(x)
    return x

modelo_classificacao = Modelo()

funcao_objetivo = nn.CrossEntropyLoss()

otimizador = torch.optim.Adam(modelo_classificacao.parameters(), lr=0.01)

epocas = 100
custos = []
for i in range(epocas):
  y_predito = modelo_classificacao.forward(X_treino)
  custo = funcao_objetivo(y_predito, y_treino)
  custos.append(custo)

  otimizador.zero_grad()
  custo.backward()
  otimizador.step()

preds = []
resul = []

with torch.no_grad():
    for val in X_teste:
        y_predito = modelo_classificacao.forward(val)
        print(y_predito)
        preds.append(y_predito.argmax().item())
        resul.append(y_predito)

df = pd.DataFrame({'Y': y_teste, 'YHat': preds})
df['Correto'] = [1 if corr == pred else 0 for corr, pred in zip(df['Y'], df['YHat'])]
df